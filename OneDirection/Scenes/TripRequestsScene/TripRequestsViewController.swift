//
//  TripRequestsViewController.swift
//  OneDirection
//
//  Created by Ashish Nautiyal on 3/22/19.
//  Copyright (c) 2019 Ashish  Nautiyal. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
protocol TripRequestsDisplayLogic: class
{
    func updateBookingStatus(success: Bool, message: String,posintion: Int)
    func displayTripRequest(tripRequest: [TripRequest], error: Error?)
}

class TripRequestsViewController: UIViewController, TripRequestsDisplayLogic
{
    //MARK: outlets
    @IBOutlet weak var noItemview: UIView!
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: Variables
    var spinner: UIActivityIndicatorView?
    var tripSelected: NSTripObject?
    var fetchedResultController : NSFetchedResultsController<NSTripRequestObject>!
    var dataController : DataController!
    var interactor: TripRequestsBusinessLogic?
    var router: (NSObjectProtocol & TripRequestsRoutingLogic & TripRequestsDataPassing)?
    
    // MARK: Lifecycle methods
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        spinner?.startAnimating()
        noItemview.isHidden = true
        interactor?.getTripRequests(trip_id: tripSelected?.id ?? "0")
        setUpFetchResultController()
    }
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        spinner = SpinnerView.showLoader(view: view)
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(imageTapped(tapGestureRecognizer:)))
        noItemview.isUserInteractionEnabled = true
        noItemview.addGestureRecognizer(tapGestureRecognizer)
        
    }
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = TripRequestsInteractor()
        let presenter = TripRequestsPresenter()
        let router = TripRequestsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // Settingup CoreData result for image collection
    fileprivate func setUpFetchResultController() {
        let predicate = NSPredicate(format: "trip_id == \(tripSelected!.id!)" )
        let fetchRequest: NSFetchRequest<NSTripRequestObject> = NSTripRequestObject.fetchRequest()
        let sortDescriptor = NSSortDescriptor(key: "id", ascending: false)
          fetchRequest.predicate = predicate
        fetchRequest.sortDescriptors = [sortDescriptor]
       fetchedResultController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: dataController.viewContext, sectionNameKeyPath: nil, cacheName: nil)
        fetchedResultController.delegate = self
        do{
            try  fetchedResultController.performFetch()
        }  catch {
        }
    }
    //MARK: IBActions
    @IBAction func onBackTapped(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
    
    @objc func imageTapped(tapGestureRecognizer: UITapGestureRecognizer)
    {
        noItemview.isHidden = true
        spinner?.startAnimating()
        interactor?.getTripRequests(trip_id: tripSelected?.id ?? "0")
        
    }
    
    // MARK: Delegate method -> TripRequestsDisplayLogic
    func displayTripRequest(tripRequest: [TripRequest], error: Error?)
    {
        if error == nil {
        saveToCoreData(tripRequests: tripRequest)
        }
        if tripRequest.count == 0
        {
            spinner?.stopAnimating()
            if fetchedResultController.sections?[0].numberOfObjects == 0 {
                noItemview.isHidden = false
            }
        }
    }
    func saveToCoreData(tripRequests : [TripRequest]){
        let backgroundContext : NSManagedObjectContext! = dataController.backgroundContext
        //deleting old items
        for trip in self.fetchedResultController.sections![0].objects!
        {
            dataController.viewContext.delete(trip as! NSManagedObject)
            try? dataController.viewContext.save()
        }
        backgroundContext.perform {
            
            for tripRequest in  tripRequests {
                let img = NSTripRequestObject(context: self.dataController.viewContext)
                img.id = tripRequest.id
                img.creater_id = Int32(tripRequest.creater_id)
                img.name = tripRequest.name
                img.phone = tripRequest.phone
                img.title = tripRequest.title
                img.trip_id = Int32(tripRequest.trip_id)
                img.uid = Int32(tripRequest.uid)
                img.enddate = tripRequest.enddate
                 img.tripObject = self.tripSelected!
                img.startsdate = tripRequest.startsdate
                img.status = Int32(tripRequest.status)
                try? backgroundContext.save()
                
            }
            DispatchQueue.main.async {
                self.spinner?.stopAnimating()
            }
        }
    }
    
    
    func updateBookingStatus(success: Bool, message: String,posintion: Int) {
        spinner?.stopAnimating()
        if success {
            if 3 == Int(message){
           dataController.viewContext.delete( (fetchedResultController.sections?[0].objects![posintion] as! NSTripRequestObject )) }
            else{
              (fetchedResultController.sections?[0].objects![posintion] as! NSTripRequestObject ).status = Int32(message)!
            }
               try! dataController.viewContext.save()
            if  fetchedResultController.sections![0].numberOfObjects == 0
            {     noItemview.isHidden = false
            }
        }
        else {
            AlertController.showAlert("Error", message: message)
        }
    }
    
    
}

//MARK: TableView Delegates
extension TripRequestsViewController : UITableViewDataSource, UITableViewDelegate{
    func numberOfSections(in tableView: UITableView) -> Int {
        return fetchedResultController.sections?.count ?? 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return fetchedResultController.sections?[section].numberOfObjects ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "TripTableViewCell") as! TripRequestTableCell
        let trip = fetchedResultController.object(at: indexPath)
        cell.name.text = "\(trip.name!) request for a seat"
        cell.subTitle.text = trip.phone
        cell.initialLabel?.text = trip.name!.components(separatedBy: " ").reduce("") { ($0 == "" ? "" : "\($0.first!)") + "\($1.first!)"}.uppercased()
        if Int(tripSelected!.uid) != Int(UserManager.shared.getUserId()!) && Int(trip.uid) != Int(UserManager.shared.getUserId()!)!{
            cell.ticketButton.isHidden = true
        }
        else{
            if 0 ==  trip.status {
                cell.ticketButton.setImage(UIImage(named: "requested.png"), for: .normal)
            }
            else if trip.status == 1 {
                cell.ticketButton.setImage(UIImage(named: "accepted.png"), for: .normal)
            }
            else if trip.status == 2 {
                cell.ticketButton.setImage(UIImage(named: "info.png"), for: .normal)
            }
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        showAlert(indexPath: indexPath)
    }
    
    func showAlert(indexPath: IndexPath){
        let trip = fetchedResultController.object(at: indexPath)
        if Int(tripSelected!.uid) != Int(UserManager.shared.getUserId()!) && Int(trip.uid) != Int(UserManager.shared.getUserId()!){
            return
        }
        var  title: String =  "\(trip.name!) request for a seat"
        var message: String = "You can accept or decline the booking request"
        if trip.status == 1 {
            title = "You have accepted \(trip.name!)''s request"
            message = "You can decline the booking request"
        }
        
        if Int(tripSelected!.uid) != Int(UserManager.shared.getUserId()!) {
            message = "\(trip.status == 0 ? "Your request is in waiting " : "Your request is accepted"). you can Delete it"
            AlertController.showAlert("Delete request?", message: message,actionLabel: "Delete",completion: {(UIAlertAction)
                in
                self.spinner?.startAnimating()
                
                let request = TripRequests.Something.Request(uid: "\(trip.uid)", trip_id: "\(trip.trip_id)", creater_id:  "\(trip.creater_id)", status: ("3") , position: indexPath.row)
                self.interactor?.updateTicket(request: request)
            })
            return
        }
        
        
        if trip.status == 0 {
            AlertController.showAlert(title, message: message,actionLabel: "Accept", actionLabel2: "Decline",completion: {(UIAlertAction)
                in
                self.spinner?.startAnimating()
                let request = TripRequests.Something.Request(uid: "\(trip.uid)", trip_id: "\(trip.trip_id)", creater_id: UserManager.shared.getUserId()!, status: ("1") , position: indexPath.row)
                self.interactor?.updateTicket(request: request)
            }
                ,completion2: {(UIAlertAction)
                    in
                    self.spinner?.startAnimating()
                    let request = TripRequests.Something.Request(uid: "\(trip.uid)", trip_id: "\(trip.trip_id)", creater_id: UserManager.shared.getUserId()!, status: ("3") , position: indexPath.row)
                    self.interactor?.updateTicket(request: request)
            })
        }
        else if trip.status == 1 {
            AlertController.showAlert(title, message: message,actionLabel: "Decline",completion: {(UIAlertAction)
                in
                self.spinner?.startAnimating()
                let request = TripRequests.Something.Request(uid: "\(trip.uid)", trip_id: "\(trip.trip_id)", creater_id: UserManager.shared.getUserId()!, status: ("3") , position: indexPath.row)
                self.interactor?.updateTicket(request: request)
            })
        }
        else  {
            AlertController.showAlert("Trip Deleted", message: "This trip has beed deleted")
        }
    }
    
}
//MARK: NSFetchedResultsControllerDelegate
extension TripRequestsViewController:NSFetchedResultsControllerDelegate {
    func controller(_ controller: NSFetchedResultsController<NSFetchRequestResult>, didChange anObject: Any, at indexPath: IndexPath?, for type: NSFetchedResultsChangeType, newIndexPath: IndexPath?) {
        switch type {
        case .insert:
           tableView.insertRows(at: [newIndexPath!], with: .fade)
            break
        case .delete:
            tableView.deleteRows(at: [indexPath!], with: .fade)
            break
        case .update:
            tableView.reloadRows(at: [indexPath!], with: .fade)
        case .move:
            tableView.moveRow(at: indexPath!, to: newIndexPath!)
        }
    }
    
    
    
    
    func controllerWillChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        tableView.beginUpdates()
    }
    
    func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        tableView.endUpdates()
    }
    
}
