//
//  FindLocationViewController.swift
//  OneDirection
//
//  Created by Ashish Nautiyal on 3/12/19.
//  Copyright (c) 2019 Ashish  Nautiyal. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import MapKit
protocol FindLocationDisplayLogic: class
{
}

class FindLocationViewController: UIViewController, FindLocationDisplayLogic
{
    //MARK: outlets
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var addressText: UITextField!
    
    // MARK: Variables
    var createDirectionVC: CreateDirectionViewController?
    var isStartPoint = true
    var   spinner: UIActivityIndicatorView?
    var places = [CLPlacemark]()
    var interactor: FindLocationBusinessLogic?
    var router: (NSObjectProtocol & FindLocationRoutingLogic & FindLocationDataPassing)?
    
    // MARK: Lifecycle methods
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    override func viewDidLoad()
    {
        super.viewDidLoad()
        spinner = SpinnerView.showLoader(view: view)
        addressText.becomeFirstResponder()
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = FindLocationInteractor()
        let presenter = FindLocationPresenter()
        let router = FindLocationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    //MARK: IBActions
    @IBAction func findLocation(_ sender: Any) {
        spinner?.startAnimating()
        let geoCoder = CLGeocoder()
        geoCoder.geocodeAddressString(addressText.text ?? "") { [weak self] (placemarks, error) in
            self?.spinner?.stopAnimating()
            guard
                let placemarks = placemarks
                else {
                    AlertController.showAlert("Location not found",message:  "Go back and enter a valid location"){
                        (action)
                        in
                        self?.navigationController!.popViewController(animated: false)
                    }
                    return
            }
            self?.places = placemarks
            self?.tableView.reloadData()
        }
    }
}

//MARK: TableView Delegates
extension FindLocationViewController : UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let place = places[indexPath.row]
        if isStartPoint {
            createDirectionVC?.startingPoint =  place
        }
        else {
            createDirectionVC?.endPoint =  place
        }
        navigationController?.popToRootViewController(animated: true)
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return places.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let place = places[indexPath.row]
        var cell = tableView.dequeueReusableCell(withIdentifier: "addressCell")
        if cell == nil {
            cell = UITableViewCell(style: .value1, reuseIdentifier: "addressCell")
        }
        cell?.textLabel?.text = place.name
        cell?.detailTextLabel?.text = "\(place.locality ?? "")  \(place.postalCode ?? "") \(place.country ?? "")"
        return cell!
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
}
