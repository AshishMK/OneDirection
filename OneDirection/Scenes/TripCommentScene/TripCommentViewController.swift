//
//  TripCommentViewController.swift
//  OneDirection
//
//  Created by Ashish Nautiyal on 4/4/19.
//  Copyright (c) 2019 Ashish  Nautiyal. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol TripCommentDisplayLogic: class
{
    func showComments(comments : [Comment], error: Error?)
    func commentAdded(comment : Comment?, error: Error?)
    func commentDeleted(comment : Comment?, error: Error?,posintion: Int)
}

class TripCommentViewController: UIViewController, TripCommentDisplayLogic
{
    
    @IBOutlet weak var messageTextField: RoundedTextField!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var noItemView: UIView!
    var spinner: UIActivityIndicatorView?
    var trip : NSTripObject?
    var dataController : DataController!
    var appDelegate: AppDelegate!
    var fetchedResultController : NSFetchedResultsController<NSCommentObject>!
    var interactor: TripCommentBusinessLogic?
    var router: (NSObjectProtocol & TripCommentRoutingLogic & TripCommentDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = TripCommentInteractor()
        let presenter = TripCommentPresenter()
        let router = TripCommentRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // Settingup CoreData result for image collection
    fileprivate func setUpFetchResultController() {
        let fetchRequest: NSFetchRequest<NSCommentObject> = NSCommentObject.fetchRequest()
        let sortDescriptor = NSSortDescriptor(key: "id", ascending: false)
        fetchRequest.sortDescriptors = [sortDescriptor]
        let predicate = NSPredicate(format: "tripObject == %@", trip!)
        fetchRequest.predicate = predicate
        fetchedResultController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: dataController.viewContext, sectionNameKeyPath: nil, cacheName: nil)
        fetchedResultController.delegate = self
        do{
            try  fetchedResultController.performFetch()
        }  catch {
        }
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    @IBAction func onBackTapped(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        appDelegate = UIApplication.shared.delegate as! AppDelegate
        //In ViewDidLoad
        tableView.transform = CGAffineTransform(rotationAngle: -(CGFloat)(Double.pi));
        tableView.scrollIndicatorInsets = UIEdgeInsetsMake(0.0, 0.0, 0.0, tableView.bounds.size.width - 8.0)
        //In cellForRowAtIndexPath
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(refressTapped(tapGestureRecognizer:)))
        noItemView.isUserInteractionEnabled = true
        noItemView.addGestureRecognizer(tapGestureRecognizer)
        messageTextField.delegate = self
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        noItemView.isHidden = true
        spinner = SpinnerView.showLoader(view: view)
        spinner?.startAnimating()
        interactor?.getComments(trip_id: trip?.id ?? "0")
        subscribeToKeyboardNotifications()
        setUpFetchResultController()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        unsubscribeFromKeyboardNotifications()
    }
    //MARK: Keyboard height detction methods
    func subscribeToKeyboardNotifications() {
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(_:)), name: .UIKeyboardWillShow, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)), name: .UIKeyboardWillHide, object: nil)
    }
    
    func unsubscribeFromKeyboardNotifications() {
        
        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillShow, object: nil)
        
        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillHide, object: nil)
    }
    
    @objc func keyboardWillShow(_ notification:Notification) {
        
        view.frame.origin.y = getKeyboardHeight(notification) * -1
    }
    
    @objc func keyboardWillHide(_ notification:Notification) {
        
        view.frame.origin.y = 0
    }
    
    func getKeyboardHeight(_ notification:Notification) -> CGFloat {
        let userInfo = notification.userInfo
        let keyboardSize = userInfo![UIKeyboardFrameEndUserInfoKey] as! NSValue // of CGRect
        return keyboardSize.cgRectValue.height - 50
        
    }
    @objc func  refressTapped(tapGestureRecognizer: UITapGestureRecognizer)
    {
        noItemView.isHidden = true
        spinner?.startAnimating()
        interactor?.getComments(trip_id: trip?.id ?? "0")
    }
    // MARK: Do something
    func showComments(comments : [Comment], error: Error?){
        if error == nil {
            saveToCoreData(comments: comments)
        }
        if comments.count == 0
        {
            spinner?.stopAnimating()
            if fetchedResultController.sections?[0].numberOfObjects == 0 {
                noItemView.isHidden = false
            }
        }
    }
    

    
    func saveToCoreData(comments : [Comment]){
        let backgroundContext : NSManagedObjectContext! = dataController.backgroundContext
        
        //deleting old items
        for trip in self.fetchedResultController.sections![0].objects!
        {   dataController.viewContext.delete(trip as! NSManagedObject)
            try? dataController.viewContext.save()
        }
        
        backgroundContext.perform {
          
            for comment in  comments {
                let img = NSCommentObject(context: self.dataController.viewContext)
                img.id = comment.id
                img.cmnt_time = comment.cmnt_time
                img.creater_id = Int32(comment.creater_id)
                img.name = comment.name
                img.phone = comment.phone
                img.tripObject = self.trip!
                img.title = comment.title
                img.trip_id = Int32(comment.trip_id)
                img.uid = Int32(comment.uid)
                img.comment = comment.comment
                try? backgroundContext.save()
            }
            DispatchQueue.main.async {
                self.spinner?.stopAnimating()
                
            }
        }
    }
    func commentAdded(comment : Comment?, error: Error?)
    {
        noItemView.isHidden = true
        spinner?.stopAnimating()
        if let comment = comment {
            let backgroundContext : NSManagedObjectContext! = dataController.backgroundContext
            
            let img = NSCommentObject(context: self.dataController.viewContext)
            img.id = comment.id
            img.cmnt_time = comment.cmnt_time
            img.creater_id = Int32(comment.creater_id)
            img.name = comment.name
            img.phone = comment.phone
            img.tripObject = self.trip!
            img.title = comment.title
            img.trip_id = Int32(comment.trip_id)
            img.uid = Int32(comment.uid)
            img.comment = comment.comment
            try? backgroundContext.save()
        
        }
        else {
            AlertController.showAlert("Can not add Comment", message: error.debugDescription)
        }
    }
    
    
    func commentDeleted(comment : Comment?, error: Error?,posintion: Int){
        spinner?.stopAnimating()
        if let _ = comment {
            let commentToDelete = fetchedResultController.sections![0].objects![posintion]
            dataController.backgroundContext.delete(commentToDelete as! NSManagedObject)
            try? dataController.backgroundContext.save()
        }
    }
    
    @IBAction func onSendButtonTapped(_ sender: Any) {
        if messageTextField.text?.count == 0  {
            AlertController.showAlert("Sending Failed",message: "Please enter a valid message" )
            return
        }
        spinner?.startAnimating()
        let comment = Comment(id : "", comment: messageTextField.text ?? "",uid: Int( UserManager.shared.getUserId() ?? "0")! ,trip_id: Int(trip?.id ?? "0")!,name: UserManager.shared.getUserName()!, phone: UserManager.shared.getUserPhone()!,cmnt_time : Double(Date().millisecondsSince1970),creater_id: Int(trip!.uid) , title: trip?.title ?? "")
        interactor?.sendComment(comment: comment)
    }
}

//MARK: TableView Delegates
extension TripCommentViewController : UITableViewDataSource, UITableViewDelegate{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
       return fetchedResultController.sections?[section].numberOfObjects ?? 0
    }
    func numberOfSections(in tableView: UITableView) -> Int {
     return fetchedResultController.sections?.count ?? 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CommentTableViewCell") as! CommentTabelCell
        let comment =  fetchedResultController.object(at: indexPath)
        cell.nameLabel.text = comment.name
        cell.commentLabel.text = comment.comment
        cell.initialLabel?.text = comment.name!.components(separatedBy: " ").reduce("") { ($0 == "" ? "" : "\($0.first!)") + "\($1.first!)" }.uppercased()
        cell.dateLabel?.text = appDelegate.formatter.string(from: Date(milliseconds: Int(comment.cmnt_time)))
        cell.transform   = CGAffineTransform(rotationAngle: CGFloat(Double.pi));
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let comment =  fetchedResultController.object(at: indexPath)
        if UserManager.shared.getUserId() == String(comment.creater_id) || String(comment.uid) ==  UserManager.shared.getUserId()  {
            
            AlertController.showAlert("Delete comment?", message: "Sure to delete this comment",actionLabel: "Delete",completion: {(UIAlertAction)
                in
                self.spinner?.startAnimating()
                
                self.interactor?.deleteComment(id: comment.id!, position: indexPath.row)
            })
        }
    }
    
}
extension TripCommentViewController: UITextFieldDelegate{
    // MARK: Text Field Delegate Methods
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.view.endEditing(true)
        return false
    }
}
//MARK: NSFetchedResultsControllerDelegate
extension TripCommentViewController:NSFetchedResultsControllerDelegate {
    func controller(_ controller: NSFetchedResultsController<NSFetchRequestResult>, didChange anObject: Any, at indexPath: IndexPath?, for type: NSFetchedResultsChangeType, newIndexPath: IndexPath?) {
        switch type {
        case .insert:
            tableView.insertRows(at: [newIndexPath!], with: .fade)
            break
        case .delete:
            tableView.deleteRows(at: [indexPath!], with: .fade)
            break
        case .update:
            tableView.reloadRows(at: [indexPath!], with: .fade)
        case .move:
            tableView.moveRow(at: indexPath!, to: newIndexPath!)
        }
    }
    
    
    
    
    func controllerWillChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        tableView.beginUpdates()
    }
    
    func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        tableView.endUpdates()
    }
    
}
