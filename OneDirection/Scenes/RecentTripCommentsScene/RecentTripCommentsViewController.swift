//
//  RecentTripCommentsViewController.swift
//  OneDirection
//
//  Created by Ashish Nautiyal on 4/5/19.
//  Copyright (c) 2019 Ashish  Nautiyal. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
protocol RecentTripCommentsDisplayLogic: class
{
    func showComments(comments : [Comment], error: Error?)
     func handleTripData(trip: Trip?, error: Error?)
}
class RecentTripCommentsViewController: UIViewController, RecentTripCommentsDisplayLogic
{
    @IBOutlet weak var noItemView: UIView!
    
    @IBOutlet weak var navigationIten: UINavigationItem!
    
    @IBOutlet weak var tableView: UITableView!
    var appDelegate: AppDelegate!
    var dataController : DataController!
    var spinner: UIActivityIndicatorView?
    var fetchedResultController : NSFetchedResultsController<NSCommentObject>!
    var interactor: RecentTripCommentsBusinessLogic?
    var selectedTrip:NSTripObject?
    var router: (NSObjectProtocol & RecentTripCommentsRoutingLogic & RecentTripCommentsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = RecentTripCommentsInteractor()
        let presenter = RecentTripCommentsPresenter()
        let router = RecentTripCommentsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // Settingup CoreData result for image collection
    fileprivate func setUpFetchResultController() {
        let predicate = NSPredicate(format: "tripObject == nil")
        
        let fetchRequest: NSFetchRequest<NSCommentObject> = NSCommentObject.fetchRequest()
        let sortDescriptor = NSSortDescriptor(key: "id", ascending: false)
        fetchRequest.predicate = predicate
        fetchRequest.sortDescriptors = [sortDescriptor]
        fetchedResultController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: dataController.viewContext, sectionNameKeyPath: nil, cacheName: nil)
        fetchedResultController.delegate = self
        do{
            try  fetchedResultController.performFetch()
        }  catch {
        }
    }
    
    //MARK: IBAction
    @objc func  refressTapped(tapGestureRecognizer: UITapGestureRecognizer)
    {
        noItemView.isHidden = true
        spinner?.startAnimating()
        interactor?.getCommentsByUserId()
    }
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
        if(segue.identifier == "detailSegue"){
            let destinationVC = segue.destination as! UITabBarController
            let vc = destinationVC.viewControllers![0] as! DetailTripViewController
            let tripRequestsViewController = destinationVC.viewControllers![1] as! TripRequestsViewController
            let tripCommentViewController = destinationVC.viewControllers![2] as! TripCommentViewController
            vc.trip = selectedTrip
            vc.dataController = dataController
            tripCommentViewController.trip = selectedTrip
            tripCommentViewController.dataController = dataController
            tripRequestsViewController.tripSelected = selectedTrip
            tripRequestsViewController.dataController = dataController
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.navigationIten.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(showfindRouteController))
        self.navigationIten.rightBarButtonItem?.tintColor = UIColor.white
        self.navigationIten.leftBarButtonItem = UIBarButtonItem(title: "Logout", style: .plain, target: self, action: #selector(logOut))
        self.navigationIten.rightBarButtonItem?.tintColor = UIColor.white
        self.navigationIten.leftBarButtonItem?.tintColor = UIColor.white
        spinner = SpinnerView.showLoader(view: view)
        appDelegate = UIApplication.shared.delegate as! AppDelegate
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(refressTapped(tapGestureRecognizer:)))
        noItemView.isUserInteractionEnabled = true
        noItemView.addGestureRecognizer(tapGestureRecognizer)
    }
    @objc func showfindRouteController(_ updateLocation: Bool){
        self.performSegue(withIdentifier: "findRouteSegue", sender: nil)
    }
    @objc func logOut(){
        AlertController.showAlert("Logout", message: "Sure to logout?",actionLabel: "Logout",completion: {
            (alert)
            in
            UserManager.shared.resetUserData()
            self.dismiss(animated: true, completion: nil)
        })
        
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        noItemView.isHidden = true
        spinner?.startAnimating()
        interactor?.getCommentsByUserId()
    setUpFetchResultController()
    }
    // MARK: Do something
    func showComments(comments : [Comment], error: Error?){
        if error == nil {
            saveToCoreData(comments: comments)
        }
        if comments.count == 0
        {
            spinner?.stopAnimating()
            if fetchedResultController.sections?[0].numberOfObjects == 0 {
                noItemView.isHidden = false
            }
        }
    }
    
    
    
    func saveToCoreData(comments : [Comment]){
        let backgroundContext : NSManagedObjectContext! = dataController.backgroundContext
        //deleting old items
        for trip in self.fetchedResultController.sections![0].objects!
        {
            dataController.viewContext.delete(trip as! NSManagedObject)
            try? dataController.viewContext.save()
        }
        backgroundContext.perform {
         
            for comment in  comments {
                let img = NSCommentObject(context: self.dataController.viewContext)
                img.id = comment.id
                img.cmnt_time = comment.cmnt_time
                img.creater_id = Int32(comment.creater_id)
                img.name = comment.name
                img.phone = comment.phone
                img.title = comment.title
                img.trip_id = Int32(comment.trip_id)
                img.uid = Int32(comment.uid)
                img.comment = comment.comment
                try? backgroundContext.save()
            }
            DispatchQueue.main.async {
                self.spinner?.stopAnimating()
            }
        }
    }
    
    
    func handleTripData(trip: Trip?, error: Error?){
        spinner?.stopAnimating()
        if let error = error {
            AlertController.showAlert("Ooops Something went wrong", message: error.localizedDescription)
        }
        else {
            let img = NSTripObject(context: self.dataController.viewContext)
            img.id = trip?.id
            img.count_accept = trip?.count_accept
            img.count  = trip?.count
            img.enddate = (trip?.enddate)!
            img.startsdate = (trip?.startsdate)!
            img.is_deleted = (trip?.deleted)!
            img.latend = (trip?.latend)!
            img.latstart = (trip?.latstart)!
            img.longend = (trip?.longend)!
            img.longstart = (trip?.longstart)!
            img.name = trip?.name
            img.pals = Int32(trip!.pals)
            img.phone = trip?.phone
            if let status = trip?.status {
                img.status =  Int32(status)
            }
            img.title = trip?.title
            img.trip_description = trip?.description
            img.uid = Int32(trip!.uid)
            img.trip_type = Int32(MainWorker.TripType.allTrip.rawValue)
            selectedTrip = img
               self.performSegue(withIdentifier: "detailSegue", sender: nil)
        }
    }
    
}
//MARK: TableView Delegates
extension RecentTripCommentsViewController : UITableViewDataSource, UITableViewDelegate{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
         return fetchedResultController.sections?[section].numberOfObjects ?? 0
    }
    func numberOfSections(in tableView: UITableView) -> Int {
        return fetchedResultController.sections?.count ?? 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CommentTableViewCell") as! CommentTabelCell
        let comment =  fetchedResultController.object(at: indexPath)
        cell.nameLabel.text = comment.title
        cell.commentLabel.text = "\(comment.name!): \(comment.comment!)"
        cell.initialLabel?.text = comment.name!.components(separatedBy: " ").reduce("") { ($0 == "" ? "" : "\($0.first!)") + "\($1.first!)" }.uppercased()
        cell.dateLabel?.text = appDelegate.formatter.string(from: Date(milliseconds: Int(comment.cmnt_time)))
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        spinner?.startAnimating()
        let comment = fetchedResultController.object(at: indexPath)
    interactor?.getTripById(trip_id: String(comment.trip_id))
    }
    
}

//MARK: NSFetchedResultsControllerDelegate
extension RecentTripCommentsViewController:NSFetchedResultsControllerDelegate {
    func controller(_ controller: NSFetchedResultsController<NSFetchRequestResult>, didChange anObject: Any, at indexPath: IndexPath?, for type: NSFetchedResultsChangeType, newIndexPath: IndexPath?) {
        switch type {
        case .insert:
            tableView.insertRows(at: [newIndexPath!], with: .fade)
            break
        case .delete:
            tableView.deleteRows(at: [indexPath!], with: .fade)
            break
        case .update:
            tableView.reloadRows(at: [indexPath!], with: .fade)
        case .move:
            tableView.moveRow(at: indexPath!, to: newIndexPath!)
        }
    }
    
    
    
    
    func controllerWillChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        tableView.beginUpdates()
    }
    
    func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        tableView.endUpdates()
    }
    
}
