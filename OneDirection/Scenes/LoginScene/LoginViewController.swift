//
//  LoginViewController.swift
//  OneDirection
//
//  Created by Ashish Nautiyal on 3/7/19.
//  Copyright (c) 2019 Ashish  Nautiyal. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func handleOTPResponse(viewModel: Login.ViewModel)
    func handleVerifyOTPResponse(viewModel: Login.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    //MARK : Outlets
    @IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var OTPView: UIView!
    @IBOutlet weak var phoneTextField: UITextField!
    @IBOutlet weak var getOTPButton: UIButton!
    @IBOutlet weak var verifyButton: UIButton!
    @IBOutlet weak var activityIndicatorOTP: UIActivityIndicatorView!
    @IBOutlet weak var enterOTPTextField: UITextField!
    @IBOutlet weak var wrongNumberButton: UIButton!
    @IBOutlet weak var verifyActivityIndicator: UIActivityIndicatorView!
     @IBOutlet weak var sentOTPMessageText: UILabel!
    
    //MARK: Properties
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        nameTextField.delegate = self
        phoneTextField.delegate = self
        
    }
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        subscribeToKeyboardNotifications()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        unsubscribeFromKeyboardNotifications()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        
        super.viewDidAppear(animated)
        if UserManager.shared.isLoggedIn() {
                self.performSegue(withIdentifier: "completeLogin", sender: nil)
        }
    }
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    //MARK: IBActions
    @IBAction func getOtp(_ sender: Any) {
        if nameTextField.text?.count == 0 {
            AlertController.showAlert("Login Failed",message: "Enter a valid Name" )
            return
        }
        if phoneTextField.text?.count == 0 {
            AlertController.showAlert("Login Failed",message: "Enter a valid Mobile Number" )
            return
        }
        setLoggingIn(true)
        let request = Login.GetOTP.RequestOTP(phone: phoneTextField.text ?? "", name: nameTextField.text ?? "")
        interactor?.getOTP(request: request)
    }
    
    @IBAction func verifyOTP(_ sender: Any) {
        if enterOTPTextField.text?.count == 0 {
            AlertController.showAlert("Login Failed",message: "Enter a valid Name" )
            return
        }
        setVeryfyingIn(true)
        let request = Login.VerifyOTP.RequestVerification(phone: UserManager.shared.getUserPhone() ?? "", otp: enterOTPTextField.text ?? "")
        interactor?.verifyOTP(request: request)
    }
    
   
    @IBAction func wrongNumber(_ sender: Any) {
        OTPView.isHidden = true
    }
    
    //MARK: Keyboard height detction methods
    func subscribeToKeyboardNotifications() {
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(_:)), name: .UIKeyboardWillShow, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)), name: .UIKeyboardWillHide, object: nil)
    }
    
    func unsubscribeFromKeyboardNotifications() {
        
        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillShow, object: nil)
        
        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillHide, object: nil)
    }
    
    @objc func keyboardWillShow(_ notification:Notification) {
        
        view.frame.origin.y = getKeyboardHeight(notification) * -1
    }
    
    @objc func keyboardWillHide(_ notification:Notification) {
        
        view.frame.origin.y = 0
    }
    
    func getKeyboardHeight(_ notification:Notification) -> CGFloat {
        return 40
        
    }
    // MARK: private methods
    func handleOTPResponse(viewModel: Login.ViewModel)
    {
        if viewModel.success {
            enterOTPTextField.text? = ""
           OTPView.isHidden = true
            sentOTPMessageText.text = "We have sent OTP on \(phoneTextField.text!)"
            OTPView.isHidden = false
        }
        else{
            AlertController.showAlert("Login Failed",message: viewModel.message )
        }
          setLoggingIn(false)
    }
    
    func handleVerifyOTPResponse(viewModel: Login.ViewModel)
    {
        if viewModel.success {
           
            OTPView.isHidden = false
            self.performSegue(withIdentifier: "completeLogin", sender: nil)
        }
        else{
            AlertController.showAlert("Login Failed",message: viewModel.message )
        }
         setVeryfyingIn(false)
        
    }
    
    func  setLoggingIn(_ loggingIn: Bool){
        if loggingIn {
            activityIndicatorOTP.startAnimating()
        }
        else{
            activityIndicatorOTP.stopAnimating()
        }
        nameTextField.isEnabled = !loggingIn
        phoneTextField.isEnabled = !loggingIn
        getOTPButton.isEnabled = !loggingIn
        
    }
    
    func  setVeryfyingIn(_ verifyingIn : Bool){
        if verifyingIn {
            verifyActivityIndicator.startAnimating()
        }
        else{
            verifyActivityIndicator.stopAnimating()
        }
        enterOTPTextField.isEnabled = !verifyingIn
        verifyButton.isEnabled = !verifyingIn
        wrongNumberButton.isEnabled = !verifyingIn
        
    }
}

extension LoginViewController : UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField.returnKeyType==UIReturnKeyType.next
        {
            phoneTextField.becomeFirstResponder()
            return true
        }
        else if textField.returnKeyType==UIReturnKeyType.go
        {
            getOtp(textField)
            return true
        }
        else if textField.returnKeyType==UIReturnKeyType.done {
            verifyOTP(textField)
        }
        return false
    }
}
